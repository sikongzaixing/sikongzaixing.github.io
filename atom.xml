<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>司空在星的博客</title>
  
  <subtitle>点点滴滴,滴滴点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sikongzaixing.github.io/"/>
  <updated>2019-06-11T08:52:10.079Z</updated>
  <id>https://sikongzaixing.github.io/</id>
  
  <author>
    <name>司空在星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cpp11mutex</title>
    <link href="https://sikongzaixing.github.io/2019/06/11/cpp11mutex/"/>
    <id>https://sikongzaixing.github.io/2019/06/11/cpp11mutex/</id>
    <published>2019-06-11T12:05:45.000Z</published>
    <updated>2019-06-11T08:52:10.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-11-多线程-Mutual-exclusion"><a href="#C-11-多线程-Mutual-exclusion" class="headerlink" title="C++11 多线程- Mutual exclusion"></a>C++11 多线程- Mutual exclusion</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mutual exclusion algorithms prevent multiple threads from simultaneously accessing shared resources. This prevents data races and provides support for synchronization between threads.</span><br><span class="line"></span><br><span class="line">互斥算法可防止多个线程同时访问共享资源。这可以防止数据争用并为线程之间的同步提供支持。</span><br></pre></td></tr></table></figure><h2 id="头文件-lt-mutex-gt"><a href="#头文件-lt-mutex-gt" class="headerlink" title="头文件  &lt;mutex&gt;"></a>头文件  <code>&lt;mutex&gt;</code></h2><h3 id="Mutex-系列"><a href="#Mutex-系列" class="headerlink" title="Mutex 系列:"></a>Mutex 系列:</h3><h4 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h4><p>​        1、简介:  <a href="https://en.cppreference.com/w/cpp/thread/mutex" target="_blank" rel="noopener">https://en.cppreference.com/w/cpp/thread/mutex</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">互斥类是一个同步原语，可用于保护共享数据不被多个线程同时访问。</span><br><span class="line"></span><br><span class="line">mutex 提供独立的、非递归所有权语义：</span><br><span class="line">1、调用线程在成功调用lock或try_lock之前拥有一个互斥锁，直到它调用unlock。 </span><br><span class="line">2、当线程拥有互斥锁时，如果所有其他线程试图声明互斥锁的所有权，则所有其他线程将阻塞（对于锁定的调用）或接收错误的返回值（对于try_lock）。 </span><br><span class="line">3、在调用lock或try_lock之前，调用线程不得拥有互斥锁。 </span><br><span class="line"></span><br><span class="line">如果在仍由任何线程拥有的情况下销毁互斥锁，或者在拥有互斥锁时线程终止，则程序的行为是未定义的。</span><br><span class="line"></span><br><span class="line">互斥类满足Mutex和StandardLayoutType的所有要求。 </span><br><span class="line"></span><br><span class="line">std::mutex 既不可复制也不可移动。</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::mutex g_mutex;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span> , <span class="built_in">std</span>::<span class="built_in">string</span>&gt; g_map;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_page</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> result = <span class="string">"fake content"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// std::lock_guard&lt;std::mutex&gt; guard(g_mutex);</span></span><br><span class="line"><span class="comment">// g_map[url] = result;</span></span><br><span class="line"></span><br><span class="line">g_mutex.lock();</span><br><span class="line">g_map[url] = result;</span><br><span class="line">g_mutex.unlock();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(save_page, <span class="string">" http://foo"</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(save_page, <span class="string">" http://bar"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;pair : g_map)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; pair.first &lt;&lt; <span class="string">"===&gt;"</span> &lt;&lt; pair.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="timed-mutex"><a href="#timed-mutex" class="headerlink" title="timed_mutex"></a>timed_mutex</h4><h4 id="recursive-mutex"><a href="#recursive-mutex" class="headerlink" title="recursive_mutex"></a>recursive_mutex</h4><h4 id="recursive-timed-mutex"><a href="#recursive-timed-mutex" class="headerlink" title="recursive_timed_mutex"></a>recursive_timed_mutex</h4><h4 id="Generic-mutex-management-通用互斥-管理器-包装器"><a href="#Generic-mutex-management-通用互斥-管理器-包装器" class="headerlink" title="Generic mutex management: 通用互斥 管理器(包装器)"></a>Generic mutex management: 通用互斥 管理器(包装器)</h4><h4 id="Generic-locking-algorithms-通用锁定-算法"><a href="#Generic-locking-algorithms-通用锁定-算法" class="headerlink" title="Generic locking algorithms:  通用锁定 算法"></a>Generic locking algorithms:  通用锁定 算法</h4><h4 id="Call-once"><a href="#Call-once" class="headerlink" title="Call once:"></a>Call once:</h4><h2 id="头文件-lt-shared-mutex-gt"><a href="#头文件-lt-shared-mutex-gt" class="headerlink" title="头文件  &lt;shared_mutex&gt;"></a>头文件  <code>&lt;shared_mutex&gt;</code></h2><p>​        涉及 C++14, c++17 暂时不整理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-11-多线程-Mutual-exclusion&quot;&gt;&lt;a href=&quot;#C-11-多线程-Mutual-exclusion&quot; class=&quot;headerlink&quot; title=&quot;C++11 多线程- Mutual exclusion&quot;&gt;&lt;/a&gt;C++11 多线程
      
    
    </summary>
    
      <category term="c++" scheme="https://sikongzaixing.github.io/categories/c/"/>
    
    
      <category term="Mutex" scheme="https://sikongzaixing.github.io/tags/Mutex/"/>
    
  </entry>
  
  <entry>
    <title>TriviallyCopyable</title>
    <link href="https://sikongzaixing.github.io/2019/06/09/TriviallyCopyable/"/>
    <id>https://sikongzaixing.github.io/2019/06/09/TriviallyCopyable/</id>
    <published>2019-06-08T19:10:03.000Z</published>
    <updated>2019-06-10T10:04:47.620Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="https://en.cppreference.com/w/cpp/named_req/TriviallyCopyable" target="_blank" rel="noopener"><em>TriviallyCopyable</em></a></p><p>所谓triviallyCopyable必须满足以下6点要求：</p><p>（1） 每一个拷贝构造函数(copy constructor)是trivial</p><p>（2） 每一个移动构造函数(move constructor)是trivial</p><p>（3） 每个拷贝赋值表达式(copy assignment operator)是trivial</p><p>（4） 每一个移动复制表达式（move assignment operator）是rivial</p><p>（5） 至少有一个拷贝构造（copy constructor）、移动拷贝（move constructor）、拷贝赋值表达式（copy assignment）、移动赋值（move assignment）是non-deleted</p><p>（6） 析构函数是trivial</p><p>Trival 是甚麽意思：</p><p>Trival Copy Constructor，需要满足以下6个条件才算是Trivial Copy Constructor</p><p>（1） 拷贝构造函数不是程序员明确定义的（隐式的或是默认的）</p><p>（2） Class T 没有虚拟的成员函数（virtual member function）</p><p>（3） Class T没有虚拟基类s</p><p>（4） Class T 的直接基类的拷贝构造函数是trivial</p><p>（5） Class T 的非静态类成员变量的拷贝构造函数是trivial</p><p>（6） Class T 没有非静态的volatile-qualified类型的成员变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  c++ cppatomic.cpp -o main -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>  </span></span><br><span class="line"><span class="class">&#123;</span>   </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;&#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>  </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> _m ;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> :</span> <span class="keyword">public</span> D  </span><br><span class="line">&#123;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">F</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i ;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="built_in">std</span>::atomic&lt;A&gt; a;  </span><br><span class="line"><span class="built_in">std</span>::atomic&lt;A*&gt; apt;  </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="built_in">std</span>::boolalpha;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"A: is_trivial: "</span> &lt;&lt;<span class="built_in">std</span>::is_trivial&lt;A&gt;::value&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;  </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"B: is_trivial: "</span> &lt;&lt;<span class="built_in">std</span>::is_trivial&lt;B&gt;::value&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;  </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"C: is_trivial: "</span> &lt;&lt;<span class="built_in">std</span>::is_trivial&lt;C&gt;::value&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;  </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"D: is_trivial: "</span> &lt;&lt;<span class="built_in">std</span>::is_trivial&lt;D&gt;::value&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;  </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"E: is_trivial: "</span> &lt;&lt;<span class="built_in">std</span>::is_trivial&lt;E&gt;::value&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;  </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"F: is_trivial: "</span> &lt;&lt;<span class="built_in">std</span>::is_trivial&lt;F&gt;::value&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;  </span><br><span class="line"><span class="built_in">std</span>::atomic&lt;C*&gt; c;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// error: _Atomic cannot be applied to type 'C' which is not trivially copyable</span></span><br><span class="line"><span class="comment">// std::atomic&lt;C&gt; c2;  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A: is_trivial: <span class="literal">true</span></span><br><span class="line">B: is_trivial: <span class="literal">false</span></span><br><span class="line">C: is_trivial: <span class="literal">false</span></span><br><span class="line">D: is_trivial: <span class="literal">false</span></span><br><span class="line">E: is_trivial: <span class="literal">false</span></span><br><span class="line">F: is_trivial: <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &lt;a href=&quot;https://en.cppreference.com/w/cpp/named_req/TriviallyCopyable&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;TriviallyCopyable&lt;/em&gt;&lt;/a&gt;&lt;/p
      
    
    </summary>
    
      <category term="c++" scheme="https://sikongzaixing.github.io/categories/c/"/>
    
    
      <category term="c++" scheme="https://sikongzaixing.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>todolist</title>
    <link href="https://sikongzaixing.github.io/2019/06/09/todolist/"/>
    <id>https://sikongzaixing.github.io/2019/06/09/todolist/</id>
    <published>2019-06-08T19:02:09.000Z</published>
    <updated>2019-06-10T09:50:56.338Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="https://en.cppreference.com/w/cpp/named_req/TriviallyCopyable" target="_blank" rel="noopener"><em>TriviallyCopyable</em></a></p><p><a href="https://en.cppreference.com/w/cpp/named_req/CopyConstructible" target="_blank" rel="noopener"><em>CopyConstructible</em></a></p><p><a href="https://en.cppreference.com/w/cpp/named_req/CopyAssignable" target="_blank" rel="noopener"><em>CopyAssignable</em></a></p><p><a href="https://en.cppreference.com/w/cpp/language/memory_model" target="_blank" rel="noopener">Memory model</a></p><p>std::weak_ptr</p><p>std::shared_ptr</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &lt;a href=&quot;https://en.cppreference.com/w/cpp/named_req/TriviallyCopyable&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;TriviallyCopyable&lt;/em&gt;&lt;/a&gt;&lt;/p
      
    
    </summary>
    
      <category term="c++" scheme="https://sikongzaixing.github.io/categories/c/"/>
    
    
      <category term="c++" scheme="https://sikongzaixing.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C++11 多线程</title>
    <link href="https://sikongzaixing.github.io/2019/06/09/mult-thread/"/>
    <id>https://sikongzaixing.github.io/2019/06/09/mult-thread/</id>
    <published>2019-06-08T16:02:48.000Z</published>
    <updated>2019-06-11T04:11:34.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-11-多线程"><a href="#C-11-多线程" class="headerlink" title="C++11 多线程"></a>C++11 多线程</h1><h2 id="C-11-多线程相关的头文件"><a href="#C-11-多线程相关的头文件" class="headerlink" title="C++11 多线程相关的头文件 :"></a><strong>C++11 多线程相关的头文件</strong> :</h2><p><a href="https://en.cppreference.com/w/cpp/thread" target="_blank" rel="noopener">https://en.cppreference.com/w/cpp/thread</a></p><p>C++11 新标准中引入了四个头文件来支持多线程编程</p><p>​        <code>&lt;atomic&gt;</code>,<code>&lt;mutex&gt;</code>,<code>&lt;condition_variable&gt;</code>,<code>&lt;future&gt;</code></p><ul><li><code>&lt;atomic&gt;</code> 该头文主要声明了两个类, std::atomic 和 std::atomic_flag，另外还声明了一套 C 风格的原子类型和与 C 兼容的原子操作的函数。</li><li><code>&lt;mutex&gt;</code> 该头文件主要声明了与互斥量(mutex)相关的类，包括 std::mutex 系列类，std::lock_guard, std::unique_lock, 以及其他的类型和函数。</li><li><code>&lt;condition_variable&gt;</code>：该头文件主要声明了与条件变量相关的类，包括 std::condition_variable 和 std::condition_variable_any。</li><li><code>&lt;future&gt;</code> 该头文件主要声明了 std::promise, std::package_task 两个 Provider 类，以及 std::future 和 std::shared_future 两个 Future 类，另外还有一些与之相关的类型和函数，std::async() 函数就声明在此头文件中。</li></ul><p>第一个实例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MacOS  Mojave 10.14.5</span></span><br><span class="line"><span class="comment">// c++ cppthread.cpp -o main -std=c++11</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">threadfoo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"threadfoo"</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// default construcror , t1 is not a thread ,t.joinable()==false </span></span><br><span class="line">   <span class="built_in">std</span>::thread t1; </span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::boolalpha &lt;&lt; t1.joinable() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// joinable == true</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(threadfoo)</span></span>;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::boolalpha &lt;&lt; t2.joinable() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">   t2.join();</span><br><span class="line">   <span class="comment">// joinable == false</span></span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::boolalpha &lt;&lt; t2.joinable() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="atomic-头文件相关"><a href="#atomic-头文件相关" class="headerlink" title="atomic  头文件相关:"></a>atomic  头文件相关:</h2><p> <a href="https://en.cppreference.com/w/cpp/atomic/atomic" target="_blank" rel="noopener">https://en.cppreference.com/w/cpp/atomic/atomic</a></p><h2 id="C-11-新增头文件-lt-atomic-gt"><a href="#C-11-新增头文件-lt-atomic-gt" class="headerlink" title="C++11 新增头文件  &lt;atomic&gt;"></a>C++11 新增头文件  <code>&lt;atomic&gt;</code></h2><p>​            <a href="https://en.cppreference.com/w/cpp/atomic/atomic" target="_blank" rel="noopener">atomic</a>,<a href="https://en.cppreference.com/w/cpp/atomic/atomic_flag" target="_blank" rel="noopener">atomic_flag</a>,<a href="https://en.cppreference.com/w/cpp/atomic/memory_order" target="_blank" rel="noopener">memory_order</a></p><h3 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h3><h5 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h5><p>原子类型对象的主要特点就是从不同线程访问不会导致数据竞争(data race)。因此从不同线程访问某个原子对象是良性 (<em>well-defined</em>) 行为，而通常对于非原子类型而言，并发访问某个对象（如果不做任何同步操作）会导致未定义 (<em>undifined</em>) 行为发生。<a href="https://en.cppreference.com/w/cpp/header/atomic" target="_blank" rel="noopener"><atomic></atomic></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Each instantiation and full specialization of the `std::atomic` template defines an atomic type. If one thread writes to an atomic object while another thread reads from it, the behavior is well-defined (see [memory model](https://en.cppreference.com/w/cpp/language/memory_model) for details on data races)</span><br><span class="line"></span><br><span class="line">In addition, accesses to atomic objects may establish inter-thread synchronization and order non-atomic memory accesses as specified by [std::memory_order](https://en.cppreference.com/w/cpp/atomic/memory_order).</span><br><span class="line"></span><br><span class="line">std::atomic is neither copyable nor movable.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std :: atomic模板的每个实例化和完全特化都定义了一个原子类型。如果一个线程写入原子对象而另一个线程从中读取，则行为是明确定义的（有关数据争用的详细信息，请参阅内存模型）</span><br><span class="line">此外，对原子对象的访问可以建立线程间同步并按 std::memory_order 的指定顺序进行非原子内存访问。</span><br><span class="line">std::atomic既不可复制也不可移动。</span><br></pre></td></tr></table></figure><table><thead><tr><th>Defined in header <code>&lt;atomic&gt;</code></th><th></th><th></th></tr></thead><tbody><tr><td>template&lt; class T &gt; struct atomic;</td><td>(1)</td><td>(since C++11)</td></tr><tr><td>template&lt; class T &gt; struct atomic&lt;T*&gt;;</td><td>(2)</td><td>(since C++11)</td></tr><tr><td>Defined in header <code>&lt;memory&gt;</code></td><td></td><td></td></tr></tbody></table><p>第一种形式的模版类型必须T是 TriviallyCopyable ,  类型必须满足以下条件:</p><ul><li><a href="http://en.cppreference.com/w/cpp/types/is_trivially_copyable" target="_blank" rel="noopener">std::is_trivially_copyable</a><t>::value</t></li><li><a href="http://en.cppreference.com/w/cpp/types/is_copy_constructible" target="_blank" rel="noopener">std::is_copy_constructible</a><t>::value</t></li><li><a href="http://en.cppreference.com/w/cpp/types/is_move_constructible" target="_blank" rel="noopener">std::is_move_constructible</a><t>::value</t></li><li><a href="http://en.cppreference.com/w/cpp/types/is_copy_assignable" target="_blank" rel="noopener">std::is_copy_assignable</a><t>::value</t></li><li><a href="http://en.cppreference.com/w/cpp/types/is_move_assignable" target="_blank" rel="noopener">std::is_move_assignable</a><t>::value</t></li></ul><p>The program is ill-formed if any of following values is <code>false</code>: </p><p>出现以下错误: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: _Atomic cannot be applied to <span class="built_in">type</span> <span class="string">'**'</span> <span class="built_in">which</span> is not trivially copyable</span><br></pre></td></tr></table></figure><h5 id="Specializations-序列化"><a href="#Specializations-序列化" class="headerlink" title="Specializations :序列化"></a>Specializations :序列化</h5><p>​    Primary template : 使用第一种形式的模版</p><p>​    Partial specializations : 使用第二种形式的模版</p><p>​    Specializations of <a href="https://en.cppreference.com/w/cpp/atomic/atomic" target="_blank" rel="noopener">std::atomic</a> for integral types :  类似 std::atomic_bool  typedef 类型 <a href="https://en.cppreference.com/w/cpp/header/atomic" target="_blank" rel="noopener">header头文件</a></p><p>​    Specializations of <a href="https://en.cppreference.com/w/cpp/atomic/atomic" target="_blank" rel="noopener">std::atomic</a> for floating point types</p><h3 id="Flag-atomic-flag"><a href="#Flag-atomic-flag" class="headerlink" title="Flag :  atomic_flag"></a>Flag :  atomic_flag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::atomic_flag is an atomic boolean type. Unlike all specializations of std::atomic, it is guaranteed to be lock-free. Unlike std::atomic&lt;bool&gt;, std::atomic_flag does not provide load or store operations.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::atomic_flag 是一种原子布尔类型。 与std::atomic的所有特化不同，它保证是无锁的。 </span><br><span class="line">与std::atomic &lt;bool&gt;不同，std::atomic_flag不提供加载或存储操作。</span><br></pre></td></tr></table></figure><p>使用语句std :: atomic_flag v = ATOMIC_FLAG_INIT;</p><p>定义可用于将std :: atomic_flag初始化为clear（false）状态的表达式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A spinlock mutex can be implemented in userspace using an atomic_flag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// init atomic_flag  to false-state</span></span><br><span class="line"><span class="built_in">std</span>::atomic_flag lock = ATOMIC_FLAG_INIT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">( <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// set var lock true-state and return last-value</span></span><br><span class="line"><span class="keyword">while</span>(lock.test_and_set(<span class="built_in">std</span>::memory_order_acquire));</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Output from thread "</span> &lt;&lt; i  &lt;&lt; <span class="string">" :"</span> &lt;&lt;<span class="built_in">std</span>::this_thread::get_id()&lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">// set/clear var lock false-state , </span></span><br><span class="line"><span class="comment">// warnning : param cannot be </span></span><br><span class="line"><span class="comment">// std::memory_order_consume, </span></span><br><span class="line"><span class="comment">// std::memory_order_acquire, </span></span><br><span class="line"><span class="comment">// std::memory_order_acq_rel</span></span><br><span class="line">lock.clear(<span class="built_in">std</span>::memory_order_release);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::thread&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">v.emplace_back(func , i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(auto  th: v)</span></span><br><span class="line"><span class="comment">// err : thread(const thread&amp;) = delete;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp; th: v)</span><br><span class="line">&#123;</span><br><span class="line">th.join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="memory-order"><a href="#memory-order" class="headerlink" title="memory_order"></a>memory_order</h3><p>对于atomic对象操作有6种memory ordering  选项，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> memory_order &#123;</span><br><span class="line">    memory_order_relaxed,</span><br><span class="line">    memory_order_consume,</span><br><span class="line">    memory_order_acquire,</span><br><span class="line">    memory_order_release,</span><br><span class="line">    memory_order_acq_rel,</span><br><span class="line">    memory_order_seq_cst</span><br><span class="line">&#125; memory_order;</span><br></pre></td></tr></table></figure><p>默认情况下的为 memory_order_seq_cst。尽管有 6种选项，但是它们代表三种模型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sequentially-consistent ordering(memory<span class="emphasis">_order_</span>seq_cst)</span><br><span class="line">acquire-release ordering(</span><br><span class="line"><span class="code">memory_order_consume,</span></span><br><span class="line"><span class="code">memory_order_acquire,</span></span><br><span class="line"><span class="code">memory_order_release, </span></span><br><span class="line"><span class="code">memory_order_acq_rel)</span></span><br><span class="line">relaxed ordering (memory<span class="emphasis">_order_</span>relaxed)。</span><br></pre></td></tr></table></figure><p>另外需要注意的是对于不同的memory ordering运行 在不同的cpu架构的机器上运行的代价是不一样的，</p><p>比如对于对同步指令的需求  sequentially-consistent ordering模型大于acquire-release ordering或者relaxed ordering ，acquire-release ordering大于relaxed ordering ；</p><p>如果是运行在多处理器的操作系统上面，这些额外的同步指令开销可能会消耗重要的 cpu时间，从而造成总体系统性能的下降。对于x86或 x86-64架构的处理器在使用 acquire-release模型的时候不需要任何额外的指令开销，甚至是对于比较严格的sequentially consisten ordering 也不需要特殊处理，并且花费的代价也很少。</p><h4 id="relaxed-ordering"><a href="#relaxed-ordering" class="headerlink" title="relaxed ordering :"></a>relaxed ordering :</h4><p>​    在这种模型下，<code>std::atomic</code>的<code>load()</code>和<code>store()</code>都要带上<code>memory_order_relaxed</code>参数。Relaxed ordering 仅仅保证<code>load()</code>和<code>store()</code>是原子操作，除此之外，不提供任何跨线程的同步。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  c++ cppmorder.cpp -o main -std=c++11</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;  </span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="keyword">atomic_int</span> <span class="title">x</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="keyword">atomic_int</span> <span class="title">y</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y1 = y.load(<span class="built_in">std</span>::memory_order_relaxed); <span class="comment">// A</span></span><br><span class="line">x.store(y1,<span class="built_in">std</span>::memory_order_relaxed); <span class="comment">// B</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"foo1 :"</span> &lt;&lt; y1 &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x1 = x.load(<span class="built_in">std</span>::memory_order_relaxed); <span class="comment">// C</span></span><br><span class="line"></span><br><span class="line">y.store(<span class="number">99</span> , <span class="built_in">std</span>::memory_order_relaxed); <span class="comment">// D</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"foo2 :"</span> &lt;&lt; y &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(foo1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(foo2)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完上面的程序，可能出现<code>r1 == r2 == 99</code>。理解这一点并不难，因为编译器允许调整 C 和 D 的执行顺序。如果程序的执行顺序是 D -&gt; A -&gt; B -&gt; C，那么就会出现<code>r1 == r2 == 99</code>。</p><p>应用场景: 如果某个操作只要求是原子操作，除此之外，不需要其它同步的保障，就可以使用 Relaxed ordering。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 程序计数器是一种典型的应用场景：</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="keyword">atomic_int</span> <span class="title">cnt</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cnt.fetch_add(<span class="number">1</span> , <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"cnt: "</span> &lt;&lt; cnt &lt;&lt; <span class="string">"  #thread:"</span> &lt;&lt; <span class="built_in">std</span>::this_thread::get_id() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::thread&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v.emplace_back(func , i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp; th: v)</span><br><span class="line">&#123;</span><br><span class="line">th.join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="acquire-release-ordering"><a href="#acquire-release-ordering" class="headerlink" title="acquire-release ordering"></a>acquire-release ordering</h4><p>在这种模型下，<code>store()</code>使用<code>memory_order_release</code>，而<code>load()</code>使用<code>memory_order_acquire</code>。</p><p>这种模型有两种效果，</p><p>第一种是可以限制 CPU 指令的重排：在<code>store()</code>之前的所有读写操作，不允许被移动到这个<code>store()</code>的后面。在<code>load()</code>之后的所有读写操作，不允许被移动到这个<code>load()</code>的前面。　　</p><p>除此之外，还有另一种效果：假设 Thread-1 <code>store()</code>的那个值，成功被 Thread-2 <code>load()</code>到了，那么 Thread-1 在<code>store()</code>之前对内存的所有写入操作，此时对 Thread-2 来说，都是可见的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">atomic_bool</span> ready&#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    data = <span class="number">100</span>;                                       <span class="comment">// A</span></span><br><span class="line">    ready.store(<span class="literal">true</span>, <span class="built_in">std</span>::memory_order_release);     <span class="comment">// B</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::boolalpha &lt;&lt;<span class="string">"producer: "</span> &lt;&lt; ready &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::boolalpha &lt;&lt;<span class="string">"consumer: "</span> &lt;&lt; ready &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"data:"</span> &lt;&lt; data &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">while</span> (!ready.load(<span class="built_in">std</span>::memory_order_acquire))    <span class="comment">// C</span></span><br><span class="line">        ;</span><br><span class="line">    assert(data == <span class="number">100</span>); <span class="comment">// never failed              // D</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(producer)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(consumer)</span></span>;</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 过程: </span></span><br><span class="line"><span class="comment">1、首先 A 不允许被移动到 B 的后面。</span></span><br><span class="line"><span class="comment">2、同样 D 也不允许被移动到 C 的前面。</span></span><br><span class="line"><span class="comment">3、当 C 从 while 循环中退出了，说明 C 读取到了 B store()的那个值，</span></span><br><span class="line"><span class="comment">此时，Thread-2 保证能够看见 Thread-1 执行 B 之前的所有写入操作（也即是 A）。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h4><ol><li><p><a href="https://link.zhihu.com/?target=http%3A//cs.nju.edu.cn/xyfeng/teaching/FOPL/lectureNotes/think-cell_talk_memorymodel.pdf" target="_blank" rel="noopener">think cell talk memory model</a></p></li><li><p><a href="https://link.zhihu.com/?target=https%3A//preshing.com/20120913/acquire-and-release-semantics/" target="_blank" rel="noopener">Acquire and Release Semantics</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-11-多线程&quot;&gt;&lt;a href=&quot;#C-11-多线程&quot; class=&quot;headerlink&quot; title=&quot;C++11 多线程&quot;&gt;&lt;/a&gt;C++11 多线程&lt;/h1&gt;&lt;h2 id=&quot;C-11-多线程相关的头文件&quot;&gt;&lt;a href=&quot;#C-11-多线程相关的头文
      
    
    </summary>
    
      <category term="mult-thread" scheme="https://sikongzaixing.github.io/categories/mult-thread/"/>
    
    
      <category term="c++" scheme="https://sikongzaixing.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>aboutcmake</title>
    <link href="https://sikongzaixing.github.io/2019/06/07/aboutcmake/"/>
    <id>https://sikongzaixing.github.io/2019/06/07/aboutcmake/</id>
    <published>2019-06-07T10:25:04.000Z</published>
    <updated>2019-06-07T06:57:34.884Z</updated>
    
    <content type="html"><![CDATA[<p>官方帮助文档:  <a href="https://cmake.org/cmake/help/v3.15/index.html" target="_blank" rel="noopener">https://cmake.org/cmake/help/v3.15/index.html</a></p><p>中文看这里 : <a href="https://www.hahack.com/codes/cmake/" target="_blank" rel="noopener">https://www.hahack.com/codes/cmake/</a></p><p>英文原版: <a href="https://cmake.org/cmake-tutorial/" target="_blank" rel="noopener">https://cmake.org/cmake-tutorial/</a></p><p>Python 版本: <a href="https://scons.org" target="_blank" rel="noopener">https://scons.org</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;官方帮助文档:  &lt;a href=&quot;https://cmake.org/cmake/help/v3.15/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cmake.org/cmake/help/v3.15/index.
      
    
    </summary>
    
      <category term="CMake" scheme="https://sikongzaixing.github.io/categories/CMake/"/>
    
    
      <category term="CMake" scheme="https://sikongzaixing.github.io/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>C++11 新特性</title>
    <link href="https://sikongzaixing.github.io/2019/06/07/cpp11/"/>
    <id>https://sikongzaixing.github.io/2019/06/07/cpp11/</id>
    <published>2019-06-07T10:25:04.000Z</published>
    <updated>2019-06-08T11:01:59.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-11新特性"><a href="#C-11新特性" class="headerlink" title="C++11新特性"></a>C++11新特性</h1><p>C++11 新特性</p><p><a href="https://harttle.land/2015/10/08/cpp11.html" target="_blank" rel="noopener">https://harttle.land/2015/10/08/cpp11.html</a></p><p>C++11新特性：右值引用与move语义</p><p><a href="https://www.tianmaying.com/tutorial/cpp11-right-value" target="_blank" rel="noopener">https://www.tianmaying.com/tutorial/cpp11-right-value</a></p><p>C++11特性：decltype关键字</p><p><a href="https://www.cnblogs.com/QG-whz/p/4952980.html" target="_blank" rel="noopener">https://www.cnblogs.com/QG-whz/p/4952980.html</a></p><p>RVO-编译器返回值优化 -  Effective C++ 20</p><p><a href="https://blog.csdn.net/gatieme/article/details/22650353" target="_blank" rel="noopener">https://blog.csdn.net/gatieme/article/details/22650353</a></p><p>C++ 资源大全</p><p><a href="https://www.cplusplus.me/2182.html" target="_blank" rel="noopener">https://www.cplusplus.me/2182.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-11新特性&quot;&gt;&lt;a href=&quot;#C-11新特性&quot; class=&quot;headerlink&quot; title=&quot;C++11新特性&quot;&gt;&lt;/a&gt;C++11新特性&lt;/h1&gt;&lt;p&gt;C++11 新特性&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://harttle.land/2
      
    
    </summary>
    
      <category term="cpp" scheme="https://sikongzaixing.github.io/categories/cpp/"/>
    
    
      <category term="cpp" scheme="https://sikongzaixing.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 3 编写 Markdown</title>
    <link href="https://sikongzaixing.github.io/2019/06/04/sublime2markdown/"/>
    <id>https://sikongzaixing.github.io/2019/06/04/sublime2markdown/</id>
    <published>2019-06-03T20:47:40.000Z</published>
    <updated>2019-06-04T08:21:34.717Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件 :"></a>安装插件 :</h5><p>​        常规安装 : Markdown Preview , Markdown Editing, Markdown Extended </p><p>Windows: shift+ctrl+p   /  macOS :  shift+command+p 或者点击 Preference -&gt; Package Control  调出命令面板,</p><p>再输入 install , 选择  Package Control: install package</p><h5 id="1、安装-Markdown-Preview-支持在浏览器中预览markdown文件"><a href="#1、安装-Markdown-Preview-支持在浏览器中预览markdown文件" class="headerlink" title="1、安装 Markdown Preview 支持在浏览器中预览markdown文件"></a>1、安装 <a href="https://packagecontrol.io/packages/MarkdownPreview" target="_blank" rel="noopener">Markdown Preview</a> 支持在浏览器中预览markdown文件</h5><pre><code>使用方式:  调出 Package Control 命令面板,输入 mdp ( markdown preview) , 来预览md 文件</code></pre><p>​             设置快捷键, Preference-&gt; key Bindings User </p><p>​            <code>{ &quot;keys&quot;: [&quot;alt+m&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: {&quot;target&quot;: &quot;browser&quot;, &quot;parser&quot;:&quot;markdown&quot;}  }</code></p><p>​            设置语法高亮和mathjax支持 : Preference-&gt;Color Scheme </p><p>​            mathjax支持(MathJax 是一个能将 LaTeX，MathML 和 AsciiMath 表示的数学式在现代浏览器网页上正确呈现现出来的开源 JavaScript 显示引擎),需要添加代码,如下:</p><p>​            Preference-&gt;Package Setting -&gt; Markdown Preview -&gt; Setting User :</p><pre><code>{    /*        Enable or not mathjax support.    */    &quot;enable_mathjax&quot;: true,    /*        Enable or not highlight.js support for syntax highlighting.    */    &quot;enable_highlight&quot;: true,}</code></pre><h5 id="2、安装Markdown-Editing-调出-Package-Control-命令面板-输入-mdi-选择相应的命令"><a href="#2、安装Markdown-Editing-调出-Package-Control-命令面板-输入-mdi-选择相应的命令" class="headerlink" title="2、安装Markdown Editing 调出 Package Control 命令面板,输入 mdi , 选择相应的命令."></a>2、安装<a href="https://packagecontrol.io/packages/MarkdownEditing" target="_blank" rel="noopener">Markdown Editing</a> 调出 Package Control 命令面板,输入 mdi , 选择相应的命令.</h5><h5 id="3、安装-MarkdownTOC-table-of-content"><a href="#3、安装-MarkdownTOC-table-of-content" class="headerlink" title="3、安装 MarkdownTOC   (table of content)"></a>3、安装 <a href="https://packagecontrol.io/packages/MarkdownTOC" target="_blank" rel="noopener">MarkdownTOC</a>   (table of content)</h5><p>​        编写 heading 较多的长文档，希望能够自动生成目录方便跳转，MarkdownTOC 可以帮助我们实现</p><p>​        插件配置在。Setting - User</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;default_autolink&quot;: true,            // 目录以链接形式呈现</span><br><span class="line">  &quot;default_bracket&quot;: &quot;round&quot;,         //目录以链接形式呈现</span><br><span class="line">  &quot;default_depth&quot;: 0                  // 无限目录深度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、安装-Markdown-Extended-让-Markdown-格式在-Sublime-中支持高亮"><a href="#4、安装-Markdown-Extended-让-Markdown-格式在-Sublime-中支持高亮" class="headerlink" title="4、安装 Markdown Extended  让 Markdown 格式在 Sublime 中支持高亮"></a>4、安装 <a href="https://packagecontrol.io/packages/Markdown%20Extended" target="_blank" rel="noopener">Markdown Extended</a>  让 Markdown 格式在 Sublime 中支持高亮</h5><h5 id="5、安装-MarkdownLivePreview-实时预览Markdown文件，左侧为md文件，右侧为预览结果。"><a href="#5、安装-MarkdownLivePreview-实时预览Markdown文件，左侧为md文件，右侧为预览结果。" class="headerlink" title="5、安装 MarkdownLivePreview :实时预览Markdown文件，左侧为md文件，右侧为预览结果。"></a>5、安装 <a href="https://packagecontrol.io/packages/MarkdownLivePreview" target="_blank" rel="noopener">MarkdownLivePreview</a> :实时预览Markdown文件，左侧为md文件，右侧为预览结果。</h5><p>​    可配合MarkdownEditing一起使用。修改如下:</p><p>​    Preferences -&gt; Package Settings -&gt; MarkdownLivePreview -&gt; Settings 的设置的右侧加一条 “markdown_live_preview_on_open”: true,`，重启sublime即可。</p><h5 id="6、安装-LiveReload-实时刷新网页"><a href="#6、安装-LiveReload-实时刷新网页" class="headerlink" title="6、安装  LiveReload 实时刷新网页"></a>6、安装  <a href="https://packagecontrol.io/packages/LiveReload" target="_blank" rel="noopener">LiveReload</a> 实时刷新网页</h5><h5 id="7、Table-Editor-制表神奇-键入表格是个体力活，Table-Editor-可以帮助我们减轻工作量"><a href="#7、Table-Editor-制表神奇-键入表格是个体力活，Table-Editor-可以帮助我们减轻工作量" class="headerlink" title="7、Table Editor 制表神奇 键入表格是个体力活，Table Editor 可以帮助我们减轻工作量"></a>7、<a href="https://packagecontrol.io/packages/Table%20Editor" target="_blank" rel="noopener">Table Editor</a> 制表神奇 键入表格是个体力活，Table Editor 可以帮助我们减轻工作量</h5><h5 id="8、-OmniMarkupPreviewer-提供了LaTex的数学公式渲染的支持，用浏览器打开以后支持浏览器的实时渲染和更新预览"><a href="#8、-OmniMarkupPreviewer-提供了LaTex的数学公式渲染的支持，用浏览器打开以后支持浏览器的实时渲染和更新预览" class="headerlink" title="8、 OmniMarkupPreviewer 提供了LaTex的数学公式渲染的支持，用浏览器打开以后支持浏览器的实时渲染和更新预览"></a>8、 <a href="https://packagecontrol.io/packages/OmniMarkupPreviewer" target="_blank" rel="noopener">OmniMarkupPreviewer</a> 提供了LaTex的数学公式渲染的支持，用浏览器打开以后支持浏览器的实时渲染和更新预览</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;renderer_options-MarkdownRenderer&quot;:</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;extensions&quot;: [&quot;tables&quot;, &quot;fenced_code&quot;, &quot;codehilite&quot;],</span><br><span class="line">    &quot;parser&quot;: &quot;markdown&quot;,</span><br><span class="line">    &quot;enabled_parsers&quot;: [&quot;markdown&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="rgb(0,255,255)" size="4">以下解决方案转载自:</font> <a href="http://roux.top/2017/10/11/Markdown编辑器/" target="_blank" rel="noopener">http://roux.top/2017/10/11/Markdown编辑器/</a></li><li><strong>注意：</strong>这个插件在配置完成后，有可能会出现无法使用，并且报错：</li><li><font color="#dd0000">404错误预览…“buffer_id（29）无效（关闭或不支持的文件格式）</font></li></ul><blockquote><ul><li><p>这里给出解决方案(上面的配置文件已经好了)：</p><blockquote><ul><li><p>如上面的配置去掉了原文件 <code>&quot;extensions&quot;: [&quot;tables&quot;, &quot;strikeout&quot;, &quot;fenced_code&quot;, &quot;codehilite&quot;]</code>的<strong>“strikeout”</strong></p></li><li><p>找到python-markdown Sublime Text3的包。</p><blockquote><ul><li>Mac: <code>subl &quot;/Users/&lt;username&gt;/Library/Application Support/Sublime Text 3/Packages/OmniMarkupPreviewer/OmniMarkupLib/Renderers/libs/mdx_strikeout.py&quot;</code></li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><blockquote><blockquote><ul><li>用以下makeExtension()方法替换方法：<br><code>def makeExtension(*args, **kwargs): return StrikeoutExtension(*args, **kwargs)</code></li><li>保存，退出并重新加载升级文本。</li></ul></blockquote></blockquote><blockquote><ul><li><font color="rgb(255,255,200)">链接</font>：<a href="https://github.com/timonwong/OmniMarkupPreviewer/issues/85" target="_blank" rel="noopener">https://github.com/timonwong/OmniMarkupPreviewer/issues/85</a></li></ul></blockquote><ul><li>[OmniMarkupPreviewer]续：<ul><li>打开OmniMarkupPreviewer的默认配置文件Setting-Default</li><li>查看参数：<br><code>&quot;server_host&quot;: &quot;127.0.0.1&quot;,</code> (开启预览服务的 IP 地址, 默认为 localhost)<br><code>&quot;html_template_name&quot;: &quot;github&quot;,</code> (预览使用的模板名称，默认为 Github)<br><code>&quot;browser_command&quot;: [],</code> (预览默认为跟随系统默认浏览器，[“open”, “-a”, “Google Chrome”, “{url}”]亦可利用这样的格式进行指定)<br><code>&quot;ignored_renderers&quot;: [&quot;LiterateHaskellRenderer&quot;],</code>(忽略/关闭的标记语言渲染器)<br><code>&quot;mathjax_enabled&quot;: false,</code>(公式的渲染使用了MathJax库，所以需要在OmniMarkupPreviewer的设置中，将”mathjax_enabled”设置为“true”)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件 :&quot;&gt;&lt;/a&gt;安装插件 :&lt;/h5&gt;&lt;p&gt;​        常规安装 : Markdown Preview , Markdown Editing, Markd
      
    
    </summary>
    
      <category term="Sublime" scheme="https://sikongzaixing.github.io/categories/Sublime/"/>
    
    
      <category term="Sublime" scheme="https://sikongzaixing.github.io/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 加入图片无法显示--解决方案</title>
    <link href="https://sikongzaixing.github.io/2019/06/04/test/"/>
    <id>https://sikongzaixing.github.io/2019/06/04/test/</id>
    <published>2019-06-03T19:29:13.000Z</published>
    <updated>2019-06-04T08:17:56.171Z</updated>
    
    <content type="html"><![CDATA[<p>测试实例:</p><p><img src="//sikongzaixing.github.io/2019/06/04/test/test.png" alt="image"></p><h5 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置,"></a>插件安装与配置,</h5><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是 <strong>hexo-asset-image</strong></p><p>​    <code>sudo npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p><h5 id="核心部分-需要修改-index-js文件"><a href="#核心部分-需要修改-index-js文件" class="headerlink" title="核心部分,需要修改 index.js文件"></a>核心部分,需要修改 index.js文件</h5><pre><code>&apos;use strict&apos;;var cheerio = require(&apos;cheerio&apos;);// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) {  return str.split(m, i).join(m).length;}var version = String(hexo.version).split(&apos;.&apos;);hexo.extend.filter.register(&apos;after_post_render&apos;, function(data){  var config = hexo.config;  if(config.post_asset_folder){    var link = data.permalink;  if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)     var beginPos = getPosition(link, &apos;/&apos;, 1) + 1;  else    var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;    // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.      var endPos = link.lastIndexOf(&apos;/&apos;) + 1;    link = link.substring(beginPos, endPos) ;    var toprocess = [&apos;excerpt&apos;, &apos;more&apos;, &apos;content&apos;];    for(var i = 0; i &lt; toprocess.length; i++){      var key = toprocess[i];      var $ = cheerio.load(data[key], {        ignoreWhitespace: false,        xmlMode: false,        lowerCaseTags: false,        decodeEntities: false      });      $(&apos;img&apos;).each(function(){        if ($(this).attr(&apos;src&apos;)){          // For windows style path, we replace &apos;\&apos; to &apos;/&apos;.          var src = $(this).attr(&apos;src&apos;).replace(&apos;\\&apos;, &apos;/&apos;);          if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp; !/^\s*\//.test(src)) {            // For &quot;about&quot; page, the first part of &quot;src&quot; can&apos;t be removed.            // In addition, to support multi-level local directory.            var linkArray = link.split(&apos;/&apos;).filter(function(elem){              return elem != &apos;&apos;;            });            var srcArray = src.split(&apos;/&apos;).filter(function(elem){              return elem != &apos;&apos; &amp;&amp; elem != &apos;.&apos;;            });            if(srcArray.length &gt; 1)            srcArray.shift();            src = srcArray.join(&apos;/&apos;);            $(this).attr(&apos;src&apos;, config.root + link + src);            console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);          }        }else{          console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);          console.info&amp;&amp;console.info($(this));        }      });      data[key] = $.html();    }  }});</code></pre><h5 id="打开-config-yml文件，修改下述内容"><a href="#打开-config-yml文件，修改下述内容" class="headerlink" title="打开_config.yml文件，修改下述内容"></a>打开_config.yml文件，修改下述内容</h5><p>​    <code>post_asset_folder: true</code><br>​    <code>url: http://localhost:4000/</code>修改为对应的地址</p><p><font size="5" color="red">此文使用: Typora 编写</font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;测试实例:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//sikongzaixing.github.io/2019/06/04/test/test.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;插件安装与配置&quot;&gt;&lt;a href=&quot;#插件安装与配置&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Hexo" scheme="https://sikongzaixing.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://sikongzaixing.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sikongzaixing.github.io/2019/06/01/hello-world/"/>
    <id>https://sikongzaixing.github.io/2019/06/01/hello-world/</id>
    <published>2019-06-01T06:47:59.345Z</published>
    <updated>2019-06-01T06:47:59.345Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
